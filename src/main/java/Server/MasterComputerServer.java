/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Server;

import Components.AddNewComputerPC;
import Components.AddNewSharedFolder;
import Components.AllComputerPanel;
import Components.ClientComputerView;
import Components.NavigationItem;
import Components.AllNetworkComputersRemote;
import Components.SendMessageChoices;
import Server.Remote.ServerInitiator;
import Server.ServerMessages.BroadCastServerMessage;
import Server.ServerMessages.MultiCastServerMessage;
import Server.ServerMessages.UnicastServerMessage;
import data.Configuration;
import data.ServerSharedFolder;
import data.Setting;
import data.TCPFileServer;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author root
 */
public class MasterComputerServer extends javax.swing.JFrame {

    /**
     * Creates new form MasterComputerServer
     */
    //Main TCP 
    public static Server serverSocket;
    //Remote desktop server TCP
    private ServerInitiator remoteServer;
    private Dimension dimension;
    private static boolean remoteStarted = false;
    //shared folder server TCP
    private TCPFileServer sharedServer;
    //all connected computer PC
    ArrayList<ServerConnectionThread> allClientPCs ;
    //thread that will hold the Remote desktop and control itsrunning status
    private Thread remoteThread;
    public MasterComputerServer() {
        try {
            //create main application socket object
            serverSocket = new Server();
            //create the main remote server object
            
            //call the method to make the UI
            initComponents();
            createToolBar();
            LoadImageIcons();
            AdjustSize();
            //setSize(dimension);
            //addHiddenPanels();
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setVisible(true);
            setVisible(true);
            //make its thread start
            serverSocket.start();
            remoteStarted = true;
            //MessageButton.setInheritsPopupMenu(true);
            SwingUtilities.updateComponentTreeUI(this);
            
            //create sharing server
            /*share = new ServerSharedFolder();
            share.start();*/
            sharedServer=new TCPFileServer();
            sharedServer.start();
        } catch (Exception ex) {
            Logger.getLogger(MasterComputerServer.class.getName()).log(Level.SEVERE, null, ex);
        }
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CenerMainPanel = new javax.swing.JPanel();
        ToolBarPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Network Management");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        CenerMainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        CenerMainPanel.setMaximumSize(new java.awt.Dimension(1300, 700));
        CenerMainPanel.setMinimumSize(new java.awt.Dimension(1300, 700));
        CenerMainPanel.setPreferredSize(new java.awt.Dimension(1300, 700));

        ToolBarPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ToolBarPanel.setMaximumSize(new java.awt.Dimension(750, 50));
        ToolBarPanel.setMinimumSize(new java.awt.Dimension(750, 50));
        ToolBarPanel.setPreferredSize(new java.awt.Dimension(750, 50));

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Setting");

        jMenuItem2.setText("Setting");
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Messages");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem1.setText("Broadcast Message");
        jMenu4.add(jMenuItem1);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(ToolBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CenerMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CenerMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE))
            .addComponent(ToolBarPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //serverSocket.start();
        SwingUtilities.updateComponentTreeUI(this);
        SwingUtilities.updateComponentTreeUI(CenerMainPanel);
        SwingUtilities.updateComponentTreeUI(ToolBarPanel);
        SwingUtilities.updateComponentTreeUI(jToolBar1);
        ToolBarPanel.revalidate();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //remoteServer.stop();
        remoteStarted = false;
    }//GEN-LAST:event_formWindowClosing

    private void createToolBar() {
        jToolBar1 = new javax.swing.JToolBar();
        AllComputersButton = new javax.swing.JButton();
        MessageButton = new javax.swing.JButton();
        RemoteDesktopButton = new javax.swing.JButton();
        RemoteApplicationButton = new javax.swing.JButton();
        SharingButton = new javax.swing.JButton();
        NetworkMaintenanceButton = new javax.swing.JButton();
        NetworkMonitorButton = new javax.swing.JButton();
        NetworkTimeButton = new javax.swing.JButton();
        NetworkUserButton = new javax.swing.JButton();
        ApplicationHelpButton = new javax.swing.JButton();
        ApplicationSettingButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.setRollover(true);

        AllComputersButton.setToolTipText("All Computers");
        AllComputersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AllComputersButtonActionPerformed();
            }
        });
        jToolBar1.add(AllComputersButton);

        MessageButton.setToolTipText("Messages");
        MessageButton.setFocusable(false);
        MessageButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        MessageButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        MessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MessageButtonActionPerformed();
            }
        });
        jToolBar1.add(MessageButton);

        RemoteDesktopButton.setToolTipText("Remote Desktop");
        RemoteDesktopButton.setFocusable(false);
        RemoteDesktopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RemoteDesktopButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        RemoteDesktopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    RemoteDesktopButtonActionPerformed();
                } catch (InterruptedException ex) {
                    Logger.getLogger(MasterComputerServer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        jToolBar1.add(RemoteDesktopButton);

        RemoteApplicationButton.setToolTipText("Remote Application");
        RemoteApplicationButton.setFocusable(false);
        RemoteApplicationButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RemoteApplicationButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        RemoteApplicationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoteApplicationButtonActionPerformed();
            }
        });
        jToolBar1.add(RemoteApplicationButton);

        SharingButton.setToolTipText("Sharing ");
        SharingButton.setFocusable(false);
        SharingButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SharingButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SharingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SharingButtonActionPerformed();
            }
        });
        jToolBar1.add(SharingButton);

        NetworkUserButton.setToolTipText("Network Users");
        NetworkUserButton.setFocusable(false);
        NetworkUserButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        NetworkUserButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        NetworkUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NetworkUserActionPerformed();
            }
        });
        jToolBar1.add(NetworkUserButton);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(846, 846, 846))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
        );
        JPanel toolBarPanel = new JPanel();
        jToolBar1.setFloatable(false);
        jToolBar1.updateUI();
        toolBarPanel.add(jToolBar1);
        jToolBar1.repaint();
        ToolBarPanel.add(toolBarPanel);
        ToolBarPanel.revalidate();
    }

    private void NetworkUserActionPerformed() {
        // TODO add your handling code here:
        AddNewComputerPC pc = new AddNewComputerPC();
        Thread t = new Thread(pc);
        t.start();
    }


    private void SharingButtonActionPerformed() {
        // TODO add your handling code here:
        AddNewSharedFolder shf = new AddNewSharedFolder();
        Thread t = new Thread(shf);
        t.start();

    }

    private void RemoteApplicationButtonActionPerformed() {
        OpenRemoteClient();
    }

    private void RemoteDesktopButtonActionPerformed() throws InterruptedException {
        OpenRemoteClient();
    }

    public void startRemoteThread() {
        remoteThread.start();
    }
    public void pauseRemoteThread() {
        remoteThread.suspend();
    }

    public void stopRemoteThread() {
        this.remoteThread.stop();
    }
    public void resumeRemoteThread() {
        this.remoteThread.resume();
    }
    
    private void MessageButtonActionPerformed() {
        if (!serverSocket.isEmpty()) {
            Object[] possibilities = {"Unicast Message", "Multicast Message", "Broadcast Message"};
            JFrame f = new JFrame();
            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            String type = (String) JOptionPane.showInputDialog(
                    f,
                    "Choose Message type to send .....\n",
                    "Server Messaging",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    possibilities,
                    "");
            if (type.equals(possibilities[0])) {
                System.out.println("The Message type is unicast   .... ");
                UnicastServerMessage uniCastServer = new UnicastServerMessage();
                Thread t1 = new Thread(uniCastServer);
                System.out.println("The Message Type is Unicast Message ");
                t1.start();
            } else if (type.equals(possibilities[1])) {
                System.out.println("The Message type is Multicast .....");
                MultiCastServerMessage multicast = new MultiCastServerMessage();
                Thread t2 = new Thread(multicast);
                System.out.println("The Message Type is Multicast Message ");
                t2.start();
            } else if (type.equals(possibilities[2])) {
                System.out.println("The Message type is broadcast .....");
                BroadCastServerMessage broadcast = new BroadCastServerMessage();
                Thread t3 = new Thread(broadcast);
                System.out.println("The Message Type is Broadcast Message ");
                t3.start();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Sorry No Client PC connected yet");
        }
    }

    private void AllComputersButtonActionPerformed() {
        if (!serverSocket.isEmpty()) {
            ArrayList<ServerConnectionThread> clientPCs = serverSocket.getAllClients();
            AllComputerPanel panel = new AllComputerPanel();
            ///add(panel, BorderLayout.CENTER);
            System.out.println("Size : " + serverSocket.getSize());

            AllComputerPanel p = new AllComputerPanel();
            for (int i = 1; i <= clientPCs.size(); i++) {
                p.addItemToPanel(new ClientComputerView("Computer PC - " + i), i);

            }
            CenerMainPanel.add(p);
            show();
        } else {
            //no client connected yet
            JOptionPane.showMessageDialog(this, "Sorry No Client PC connected yet");

        }
    }

    public JPanel getCenerMainPanel() {
        return CenerMainPanel;
    }

    private javax.swing.JButton AllComputersButton;
    private javax.swing.JButton NetworkMaintenanceButton;
    private javax.swing.JButton MessageButton;
    private javax.swing.JButton NetworkMonitorButton;
    private javax.swing.JButton NetworkUserButton;
    private javax.swing.JButton ApplicationSettingButton;
    private javax.swing.JButton ApplicationHelpButton;
    private javax.swing.JButton NetworkTimeButton;
    private javax.swing.JButton RemoteApplicationButton;
    private javax.swing.JButton RemoteDesktopButton;
    private javax.swing.JButton SharingButton;

    private javax.swing.JToolBar jToolBar1;


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CenerMainPanel;
    private javax.swing.JPanel ToolBarPanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    // End of variables declaration//GEN-END:variables

    private void LoadImageIcons() {
        AllComputersButton.setIcon(Configuration.getImageIcon("computer_ic.png")); // NOI18N
        MessageButton.setIcon(Configuration.getImageIcon("message_ic.png"));
        RemoteDesktopButton.setIcon(Configuration.getImageIcon("remote_desktop_ic.png")); // NOI18N
        RemoteApplicationButton.setIcon(Configuration.getImageIcon("remot_app_ic.png")); // NOI18N
        SharingButton.setIcon(Configuration.getImageIcon("sharing_ic.png")); // NOI18N
        NetworkMaintenanceButton.setIcon(Configuration.getImageIcon("maintenance_ic.png")); // NOI18N
        NetworkMonitorButton.setIcon(Configuration.getImageIcon("monitor_ic.jpeg")); // NOI18N
        NetworkTimeButton.setIcon(Configuration.getImageIcon("network_time_ic.png")); // NOI18N
        NetworkUserButton.setIcon(Configuration.getImageIcon("users_ic.jpeg")); // NOI18N
        ApplicationSettingButton.setIcon(Configuration.getImageIcon("networkmngmnt_ic.png")); // NOI18N
        ApplicationHelpButton.setIcon(Configuration.getImageIcon("help_ic.jpeg")); // NOI18N*/
        SwingUtilities.updateComponentTreeUI(this);
    }

    private void AdjustSize() {
        dimension = Configuration.getScreenDimension();
        setSize(dimension);
        Dimension d = this.getSize();
        ToolBarPanel.setPreferredSize(new Dimension(50, d.height));
        CenerMainPanel.setPreferredSize(new Dimension((d.width - 60), (d.height - 10)));
        SwingUtilities.updateComponentTreeUI(this);
    }

    private void addHiddenPanels() {
        JPanel lineEndPanel = new JPanel();
        Dimension d = this.getSize();
        lineEndPanel.setSize(new Dimension(1, d.height));
        getContentPane().add(lineEndPanel, BorderLayout.EAST);

        JPanel pageStartPanel = new JPanel();
        pageStartPanel.setSize(new Dimension(d.width, 1));
        getContentPane().add(pageStartPanel, BorderLayout.NORTH);

        JPanel pageEndPanel = new JPanel();
        pageEndPanel.setSize(new Dimension(d.width, 1));
        getContentPane().add(pageEndPanel, BorderLayout.NORTH);

    }

    private void OpenRemoteClient() {
        if (!serverSocket.isEmpty()) {
            CenerMainPanel.removeAll();
            AllComputerPanel p = new AllComputerPanel();
            CenerMainPanel.add(p);
            remoteThread = new ServerInitiator(p);
            //Thread.sleep(5000);
            remoteThread.start();
            serverSocket.sendData(Setting.MESSAGE_REMOTE_DESKTOP);
            if (!remoteStarted) {
                remoteServer.start();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Sorry No Client PC connected yet");
        }
    }

}
